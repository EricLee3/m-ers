<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.asnet.migam.repository.agent.AgentDaoMapper">
	<resultMap id="rmapAgent" type="agent">
        <result property="index" column="idx" />
        <result property="agentNumber" column="agent_no" />
        <result property="agentId" column="agent_id" />
        <result property="agentName" column="agent_name" />
        <result property="agentIp" column="agent_ip" />
        <result property="isAudit" column="realtime" />
        <result property="isAuditBatch" column="nonrealtime" />
        <result property="groupId" column="group_id" />
        <result property="groupName" column="group_name" />
        <result property="stressCount" column="stressCount" />
        <result property="angryCount" column="angryCount" />
        <result property="callStatus" column="callStatus" />
        <result property="agent_profile_id" column="agent_profile_id" />
        <result property="customer_profile_id" column="customer_profile_id" />
        <result property="profile_name_agent" column="profile_name_agent" />
        <result property="profile_name_cus" column="profile_name_cus" />
	</resultMap>
	
	<sql id="sql_agent">
		<![CDATA[
		select
			idx,
			agent_no,
			agent_id,
			agent_name,
			agent_ip,
			realtime,
			nonrealtime,
			mecs5_agent.group_id as group_id,
			mecs5_agent_group.group_name as group_name,
			mecs5_agent.agent_profile_id,
			mecs5_agent.customer_profile_id
		from 
			mecs5_agent
			left join mecs5_agent_group
			on mecs5_agent.group_id = mecs5_agent_group.group_id
		]]>
	</sql>

	<insert id="insertAgent" parameterType="agent">
		<![CDATA[
		insert into mecs5_agent (
			agent_no,
			agent_id,
			agent_name,
			agent_ip,
			realtime,
			nonrealtime,
			group_id,
			agent_profile_id,
			customer_profile_id
		) values (
			#{agentNumber},
			#{agentId},
			#{agentName},
			#{agentIp},
			#{isAudit},
			#{isAuditBatch},
			#{groupId},
			#{profile_name_agent},
			#{profile_name_cus}
		)
		]]>
		<selectKey resultType="Integer" keyProperty="index" order="AFTER">
		  SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>
	
	<insert id="insertAgentChanged" parameterType="agent">
		<![CDATA[
		insert into mecs5_agent_changed (
			agent_ip
		) values (
			#{agentId}
		)
		]]>
	</insert>
	

	<sql id="sql_paging">
		<if test="pageDTO != null">
			<![CDATA[
			limit #{pageDTO.startRow}, #{pageDTO.itemPerPage}
			]]>
		</if>
	</sql>

	<sql id="sql_search">
		<where>
            <if test="searchDTO != null">
            	<if test="searchDTO.searchIsAudit != null and searchDTO.searchIsAudit != ''">
            	<![CDATA[
                	and realtime = '${searchDTO.searchIsAudit}'
            	]]>
            	</if>
            	<if test="searchDTO.searchIsAuditBatch != null and searchDTO.searchIsAuditBatch != ''">
            	<![CDATA[
                	and nonrealtime = '${searchDTO.searchIsAuditBatch}'
            	]]>
            	</if>
            	</if>
				<if test="searchDTO.searchGroup != null and searchDTO.searchGroup != ''">
	            <![CDATA[
	                and mecs5_agent.group_id = '${searchDTO.searchGroup}'
	            ]]>
				</if>
				<if test="searchDTO.searchQuery != null and searchDTO.searchQuery != ''">
	            <![CDATA[
	                and (agent_name like '%${searchDTO.searchQuery}%' or agent_id like '%${searchDTO.searchQuery}%' or agent_no like '%${searchDTO.searchQuery}%') 
	            ]]>
				
			</if>
		</where>
	</sql>
	
	<sql id="sql_search_audit">
		<where>
            <if test="searchDTO != null">
            	<if test="searchDTO.searchIsAudit != null and searchDTO.searchIsAudit != ''">
            	<![CDATA[
                	and realtime = '${searchDTO.searchIsAudit}'
            	]]>
            	</if>
            	<if test="searchDTO.searchIsAuditBatch != null and searchDTO.searchIsAuditBatch != ''">
            	<![CDATA[
                	and nonrealtime = '${searchDTO.searchIsAuditBatch}'
            	]]>
				</if>
			</if>
		</where>
	</sql>
	
	<select id="selectAgent" parameterType="int" resultMap="rmapAgent">
		<include refid="sql_agent" />
		<where>
			<![CDATA[idx = #{index}]]>
		</where>
	</select>

	<select id="selectAgentById" parameterType="String" resultMap="rmapAgent">
		<include refid="sql_agent" />
		<where>
			<![CDATA[agent_id = #{agentId}]]>
		</where>
	</select>
	
	<update id="updateAgent" parameterType="agent">
		update mecs5_agent
		<set>
			agent_no = #{agentNumber},
			agent_id = #{agentId},
			agent_name = #{agentName},
			agent_ip = #{agentIp},
			realtime = #{isAudit},
			nonrealtime = #{isAuditBatch},
			group_id = #{groupId},
			agent_profile_id = #{profile_name_agent},
			customer_profile_id = #{profile_name_cus}
		</set>
		<where>
			idx = #{index}
		</where>
	</update>
	
	<update id="updateAgentById" parameterType="agent">
		update mecs5_agent
		<set>
			<if test="agentNumber != ''">agent_no = #{agentNumber},</if>
			<if test="agentName != ''">agent_name = #{agentName},</if>
			<if test="agentIp != ''">agent_ip = #{agentIp}</if>
		</set>
		<where>
			agent_id = #{agentId}
		</where>
	</update>
	
	<select id="selectAgentList" parameterType="hashmap" resultMap="rmapAgent">
		<include refid="sql_agent" />
		<include refid="sql_search" />
		<![CDATA[${orderby}]]>
		<include refid="sql_paging" />
	</select>
	
	<select id="selectLatestAgentList" parameterType="hashmap" resultMap="rmapAgent">
		<include refid="sql_agent" />
		<include refid="sql_search_audit" />
		<![CDATA[${orderby}]]>
	</select> 

	<select id="selectCount" parameterType="hashmap" resultType="int">
		<![CDATA[select count(*) from (]]>
		<include refid="sql_agent" />
		<include refid="sql_search" />
		<![CDATA[) cnt]]>
	</select>

	<delete id="deleteAgent" parameterType="String">
		<![CDATA[
			delete from mecs5_agent where idx = #{index}
		]]>
	</delete>
	
	<delete id="deleteAgentById" parameterType="String">
		<![CDATA[
			delete from mecs5_agent where agent_id = #{agentId}
		]]>
	</delete>
	
	<select id="selectAgentListWithCount" parameterType="hashmap" resultMap="rmapAgent">
		<![CDATA[
			select A.*, B.stressCount, B.angryCount 
			from mecs5_agent A,
			(
				select sum( stress_cnt ) as stressCount, sum(angry_cnt) as angryCount, agent_id 
				from mecs5_agent_stat_hourly 
				where date_format( stat_time, '%Y-%m-%d' ) = #{searchDTO.startDate}
				group by agent_id 
			) B
			where A.agent_id = B.agent_id;
		]]>
	</select>

	<select id="selectAgentListWithCountFromDaily" parameterType="hashmap" resultMap="rmapAgent">
		<![CDATA[
			select A.*, B.stressCount, B.angryCount 
			from mecs5_agent A,
			(
				select sum( stress_cnt ) as stressCount, sum(angry_cnt) as angryCount, agent_id 
				from mecs5_agent_stat_daily 
				where date_format( stat_time, '%Y-%m-%d' ) >= #{searchDTO.startDate}
				and date_format( stat_time, '%Y-%m-%d' ) <= #{searchDTO.endDate}
				group by agent_id 
			) B
			where A.agent_id = B.agent_id
		]]>
		<![CDATA[${orderby}]]>
		<include refid="sql_paging" />
	</select>
	
	<select id="selectAgentListWithAngry" parameterType="hashmap" resultMap="rmapAgent">
		<![CDATA[
			select A.*, COALESCE (0) as angryCount, COALESCE ( B.call_state, 0 ) as callStatus 
			from mecs5_agent A
			LEFT JOIN mecs5_realtime_state B ON A.agent_id = B.agent_id
			where A.group_id=#{searchDTO.searchGroup};
		]]>
	</select> 

	<select id="selectAgentWithCount" parameterType="hashmap" resultMap="rmapAgent">
		<![CDATA[
		 	select sum(angry_cnt) as angryCount, sum(stress_cnt) as stressCount 
		  	from mecs5_agent_stat_daily
		]]>
		<where>
			<![CDATA[
		  	agent_id = #{searchDTO.searchId} 
		  	and date_format(stat_time,'%Y-%m-%d') <= #{searchDTO.endDate} 
		  	and date_format(stat_time,'%Y-%m-%d') >= #{searchDTO.startDate}
		  	]]>
		</where>
	</select> 

	 
</mapper> 